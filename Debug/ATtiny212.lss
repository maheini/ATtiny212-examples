
ATtiny212.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f80  00803f80  000000dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000088  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b95  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014c0  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f61  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00004475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00004527  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	20 c0       	rjmp	.+64     	; 0x84 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:

#define ADC_PIN PIN2_bm
#define LED_PIN PIN1_bm

int main(void){
	PORTA.DIR |= LED_PIN;	// Set PIN 1 as output
  46:	e0 e0       	ldi	r30, 0x00	; 0
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	80 81       	ld	r24, Z
  4c:	82 60       	ori	r24, 0x02	; 2
  4e:	80 83       	st	Z, r24
	
	CCP |= CCP_IOREG_gc;	// remove configuration change protection for a second change
  50:	84 b7       	in	r24, 0x34	; 52
  52:	88 6d       	ori	r24, 0xD8	; 216
  54:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = CLKCTRL_PDIV_10X_gc | CLKCTRL_PEN_bm;	// change and enable prescaler
  56:	e0 e6       	ldi	r30, 0x60	; 96
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	83 e1       	ldi	r24, 0x13	; 19
  5c:	81 83       	std	Z+1, r24	; 0x01
	
	CLKCTRL.MCLKCTRLA |= CLKCTRL_CLKOUT_bm;	// Output clock signal
  5e:	80 81       	ld	r24, Z
  60:	80 68       	ori	r24, 0x80	; 128
  62:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	2f e7       	ldi	r18, 0x7F	; 127
  66:	8a e1       	ldi	r24, 0x1A	; 26
  68:	96 e0       	ldi	r25, 0x06	; 6
  6a:	21 50       	subi	r18, 0x01	; 1
  6c:	80 40       	sbci	r24, 0x00	; 0
  6e:	90 40       	sbci	r25, 0x00	; 0
  70:	e1 f7       	brne	.-8      	; 0x6a <main+0x24>
  72:	00 c0       	rjmp	.+0      	; 0x74 <main+0x2e>
  74:	00 00       	nop
	
	
	while(1){
		_delay_ms(1000);
		PORTA.OUT ^= LED_PIN;
  76:	e0 e0       	ldi	r30, 0x00	; 0
  78:	f4 e0       	ldi	r31, 0x04	; 4
  7a:	94 81       	ldd	r25, Z+4	; 0x04
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	89 27       	eor	r24, r25
  80:	84 83       	std	Z+4, r24	; 0x04
  82:	f0 cf       	rjmp	.-32     	; 0x64 <main+0x1e>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>
